version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.0
  node: circleci/node@5.0.3
  nx: nrwl/nx@1.6.1
executors:
  with-chrome:
    resource_class: medium
    docker:
      - image: "cypress/base:16.14.2-slim"
jobs:
  agent:
    docker:
      - image: cimg/node:16.18.1-browsers
    parameters:
      ordinal:
        type: integer
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Start the agent << parameters.ordinal >>
          command: yarn nx-cloud start-agent
          no_output_timeout: 60m
  main:
    docker:
      - image: cimg/node:16.18.1-browsers
    environment:
      MAIN_BRANCH_NAME: master
      NX_CLOUD_DISTRIBUTED_EXECUTION: 'true'
    steps:
      - checkout
      - run:
          name: Install Doppler CLI to current directory
          command: (sudo curl -Ls https://cli.doppler.com/install.sh || sudo wget -qO- https://cli.doppler.com/install.sh) | sudo sh
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile
      - nx/set-shas:
          main-branch-name: 'master'
      - run:
          name: Initialize the Nx Cloud distributed CI run
          command: yarn nx-cloud start-ci-run --stop-agents-after="build" --agent-count=3
      - run:
          name: Run workspace lint
          command: yarn nx-cloud record -- yarn nx workspace-lint
      - run:
          name: Run lint
          command: yarn nx affected --base=$NX_BASE --head=$NX_HEAD --parallel=3 --target=lint
      - run:
          name: Run e2e
          environment:
            API_BASE_URL: http://localhost:3333
          command: yarn nx affected --base=$NX_BASE --head=$NX_HEAD  --target=e2e --ci --code-coverage
      - run:
          name: Run build
          command: yarn nx affected --base=$NX_BASE --head=$NX_HEAD --parallel=3 --target=build --exclude=trok-backend
      - run:
          name: "Echo current working directory"
          command: |
            root=$(pwd)
            APP_DIR="$root/apps/trok-dashboard-e2e/src/e2e"
            DIST_DIR="$root/dist/cypress/apps/trok-dashboard-e2e"
            echo $(pwd)
            if [ -d "$APP_DIR" ]; then
              # Take action if $DIR exists. #
              echo "Installing config files in ${APP_DIR}..."
            fi
            if [ -d "$DIST_DIR" ]; then
              # Take action if $DIST_DIR exists. #
              echo "Installing config files in ${DIST_DIR}..."
            fi
          when: on_fail
      - store_artifacts:
          path: ./dist/cypress/apps/trok-dashboard-e2e/screenshots/0-auth
          destination: screenshots/0-auth
      - store_artifacts:
          path: ./dist/cypress/apps/trok-dashboard-e2e/videos/0-auth
          destination: videos/0-auth
      - run:
          name: Stop all agents
          command: yarn nx-cloud stop-all-agents
          when: always
  staging:
    docker:
      - image: cimg/node:16.18.1-browsers
    environment:
      API_BASE_URL: https://trok-api-dev.onrender.com
      MAIN_BRANCH_NAME: staging
      DOPPLER_TOKEN: dp.st.ci.0uZw3cZJ76xwRSHRNbNwsNCik3S3RipngU9IEidpnl1
      NX_CLOUD_DISTRIBUTED_EXECUTION: 'true'
    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: '16.13'
      - run: node --version
      - run:
          name: Install Doppler CLI to current directory
          command: (sudo curl -Ls https://cli.doppler.com/install.sh || sudo wget -qO- https://cli.doppler.com/install.sh) | sudo sh
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile
      - nx/set-shas:
          main-branch-name: 'staging'
      - run:
          name: Initialize the Nx Cloud distributed CI run
          command: yarn nx-cloud start-ci-run --stop-agents-after="build" --agent-count=3
      - run:
          name: Run workspace lint
          command: yarn nx-cloud record -- yarn nx workspace-lint
      - run:
          name: Run lint
          command: yarn nx affected --base=$NX_BASE --head=$NX_HEAD --parallel=3 --target=lint
      - run:
          name: Run e2e
          environment:
            DOPPLER_TOKEN: dp.st.ci.0uZw3cZJ76xwRSHRNbNwsNCik3S3RipngU9IEidpnl1
          command: yarn start-server-and-test "sudo doppler run --token=$DOPPLER_TOKEN -- yarn nx serve trok-backend --no-dte" http://localhost:3333/ping -- "yarn nx affected --base=$NX_BASE --head=$NX_HEAD --target=e2e --ci --code-coverage"
      - run:
          name: Run build
          command: yarn nx affected --base=$NX_BASE --head=$NX_HEAD --target=build --parallel=3 --exclude=trok-backend
      - run:
          name: "Echo current working directory"
          command: |
            root=$(pwd)
            APP_DIR="$root/apps/trok-dashboard-e2e/src/e2e"
            DIST_DIR="$root/dist/cypress/apps/trok-dashboard-e2e"
            echo $(pwd)
            if [ -d "$APP_DIR" ]; then
              # Take action if $DIR exists. #
              echo "Installing config files in ${APP_DIR}..."
            fi
            if [ -d "$DIST_DIR" ]; then
              # Take action if $DIST_DIR exists. #
              echo "Installing config files in ${DIST_DIR}..."
            fi
          when: on_fail
      - store_artifacts:
          path: ./dist/cypress/apps/trok-dashboard-e2e/screenshots/0-auth
          destination: screenshots/0-auth
      - store_artifacts:
          path: ./dist/cypress/apps/trok-dashboard-e2e/videos/0-auth
          destination: videos/0-auth
      - run:
          name: Stop all agents
          command: yarn nx-cloud stop-all-agents
          when: always
  test:
    docker:
      - image: cimg/node:16.18.1-browsers
    steps:
      - checkout
      - run:
          name: "Echo current working directory"
          command: |
            root=$(pwd)
            DIR="$root/apps/trok-dashboard-e2e/src/e2e"
            echo $(pwd)
            if [ -d "$DIR" ]; then
              # Take action if $DIR exists. #
              echo "Installing config files in ${DIR}..."
            fi
workflows:
  version: 2
  nx-cypress-e2e:
    jobs:
      - agent:
          name: Nx Cloud Agent << matrix.ordinal >>
          matrix:
            parameters:
              ordinal: [ 1, 2, 3 ]
          filters:
            branches:
              only:
                - staging
                - main
      #      - test:
      #          name: "Test Run"
      #          filters:
      #            branches:
      #              only:
      #                - staging
      #                - main
      - main:
          name: Nx Cloud Main
          filters:
            branches:
              only:
                - main
      - staging:
          name: Nx Cloud Staging
          filters:
            branches:
              only:
                - staging
