// -------------------------------------
// WARNING
// THIS FILE IS AUTOGENERATED BY PRISMERGE
// DO NOT MANUALLY EDIT THIS FILE!
// -------------------------------------

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BankAccount {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id])
  userId              String
  stripe_bank_id      String    @unique
  bank_name           String?
  fingerprint         String?
  account_holder_name String
  institution_id      String
  account_number      String
  sort_code           String
  currency            String    @default("gbp")
  country             String    @default("GB")
  status              String
  is_default          Boolean   @default(true)
  Payment             Payment[]
}
model Card {
  id                          String             @id @default(auto()) @map("_id") @db.ObjectId
  created_at                  DateTime           @default(now())
  updated_at                  DateTime           @updatedAt
  user                        User               @relation(fields: [userId], references: [id])
  userId                      String
  driver                      Driver             @relation(fields: [driverId], references: [id])
  driverId                    String
  card_id                     String             @unique
  card_name                   String?
  card_type                   CardType
  cardholder_id               String
  cardholder_name             String
  current_balance             Int                @default(0)
  currency                    String
  status                      CardStatus
  brand                       String
  last4                       String
  exp_month                   Int
  exp_year                    Int
  cvc                         String?
  allowed_merchant_categories MerchantCodeInfo[]
  spending_limits             SpendingLimit[]
  shipping_status             String
  shipping_eta                Int                @db.Long
  transactions                Transaction[]
}
model Customer {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @db.ObjectId
  display_name    String
  primary_contact String
  company         String
  email           String?
  phone           String?
  website         String?
  billing_address Address?
  invoices        Invoice[]
}
model Driver {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id])
  userId         String
  cardholder_id  String         @unique
  customer_id    String         @unique
  full_name      String
  firstname      String
  lastname       String
  email          String
  phone          String
  status         String
  spending_limit SpendingLimit?
  current_spend  Int            @default(0)
  address        Address
  cards          Card[]
  transactions   Transaction[]
}
enum ShippingSpeed {
  express
  standard
  priority
}

enum TransactionType {
  capture
  refund
}

enum SpendingLimitInterval {
  per_authorization
  daily
  weekly
  monthly
  yearly
  all_time
}

enum CardStatus {
  active
  inactive
  canceled
}

enum CardType {
  physical
  virtual
}

enum FuelType {
  diesel
  unleaded_plus
  unleaded_regular
  unleaded_super
  other
}

enum UnitType {
  us_gallon
  liter
}

enum TransactionStatus {
  approved
  declined
  pending
}

enum PaymentStatus {
  PAYMENT_STATUS_INPUT_NEEDED
  PAYMENT_STATUS_PROCESSING
  PAYMENT_STATUS_INITIATED
  PAYMENT_STATUS_COMPLETED
  PAYMENT_STATUS_INSUFFICIENT_FUNDS
  PAYMENT_STATUS_FAILED
  PAYMENT_STATUS_BLOCKED
  PAYMENT_STATUS_UNKNOWN
  PAYMENT_STATUS_EXECUTED
  PAYMENT_STATUS_SETTLED
  PAYMENT_STATUS_AUTHORISING
  PAYMENT_STATUS_CANCELLED
  PAYMENT_STATUS_ESTABLISHED
  PAYMENT_STATUS_REJECTED
}

enum PaymentInterval {
  weekly
  monthly
}

enum TransactionDeclineCode {
  authorization_controls
  disallowed_merchant
  card_active
  card_inactive
  cardholder_inactive
  cardholder_verification_required
  account_disabled
  spending_controls
  insufficient_funds
  not_allowed
  verification_failed
  suspected_fraud
  incorrect_pin
  webhook_declined
  webhook_approved
  webhook_timeout
}

enum InvoicePaidStatus {
  paid
  unpaid
  partially_paid
}

enum TaxType {
  inclusive
  exclusive
}
model Invoice {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  user           User              @relation(fields: [userId], references: [id])
  userId         String            @db.ObjectId
  customer       Customer          @relation(fields: [customerId], references: [id])
  customerId     String            @db.ObjectId
  customer_name  String
  ItemIds        String[]          @db.ObjectId
  items          Item[]            @relation(fields: [ItemIds], references: [id])
  line_items     InvoiceLineItem[]
  invoice_id     String            @unique
  invoice_number String
  invoice_date   Int               @db.Long
  due_date       Int               @db.Long
  tax_rate       TaxRate?          @relation(fields: [taxRateId], references: [id])
  subtotal       Int               @db.Long
  amount_due     Int               @db.Long
  total_amount   Int               @db.Long
  status         String
  paid_status    InvoicePaidStatus
  notes          String?
  taxRateId      String?           @db.ObjectId
}
model Item {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  name        String
  price       Int
  description String?
  unit        String?
  active      Boolean   @default(true)
  invoiceIds  String[]  @db.ObjectId
  invoices    Invoice[] @relation(fields: [invoiceIds], references: [id])
}
model Payment {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  user                 User             @relation(fields: [userId], references: [id])
  userId               String
  plaid_payment_id     String           @unique
  plaid_recipient_id   String
  plaid_link_token     String           @unique
  link_session_id      String           @unique @default(uuid())
  bankAccount          BankAccount      @relation(fields: [bankAccountId], references: [id])
  bankAccountId        String
  recipient_name       String
  reference            String
  amount               Int
  currency             String           @default("gbp")
  payment_type         String           @default("bank_transfer")
  plaid_payment_status PaymentStatus
  recurring            Boolean          @default(false)
  schedule             PaymentSchedule?
  status               String
}
model Referral {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  enabled          Boolean
  user             User     @relation(fields: [userId], references: [id], name: "user_referral")
  userId           String   @unique @db.ObjectId
  referrer         User     @relation(fields: [referrer_user_id], references: [id], name: "referred_users")
  referrer_user_id String   @db.ObjectId
  referral_code    String
}
model Statement {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  statement_id  String        @unique
  period_start  DateTime
  period_end    DateTime
  total_balance Int           @db.Long
  transactions  Transaction[]
  download_url  String
}
model TaxRate {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  name        String
  percentage  Float
  description String?
  calculation TaxType
  Invoice     Invoice[]
}
model Transaction {
  id                 String                  @id @default(auto()) @map("_id") @db.ObjectId
  created_at         DateTime                @default(now())
  updated_at         DateTime                @updatedAt
  user               User                    @relation(fields: [userId], references: [id])
  userId             String
  driver             Driver                  @relation(fields: [driverId], references: [id])
  driverId           String
  card               Card                    @relation(fields: [cardId], references: [id])
  cardId             String
  statement          Statement?              @relation(fields: [statementId], references: [id])
  statementId        String?
  cardholder_name    String
  last4              String
  authorization_id   String                  @unique
  transaction_id     String                  @unique
  transaction_amount Int
  transaction_type   TransactionType
  cardholder_id      String
  currency           String                  @default("gbp")
  merchant_amount    Int
  merchant_data      MerchantData
  purchase_details   PurchaseDetails?
  status             TransactionStatus
  decline_code       TransactionDeclineCode?
  decline_reason     String?
}
type StripeInfo {
  accountId       String
  personId        String
  issuing_account IssuingBankAccount
}

type IssuingBankAccount {
  plaid_recipient_id  String
  plaid_request_id    String?
  current_balance     Int     @default(0)
  account_holder_name String
  account_number      String
  sort_code           String
  currency            String  @default("gbp")
  country             String  @default("GB")
}

type Address {
  line1    String
  line2    String?
  city     String
  postcode String
  region   String
  country  String? @default("GB")
}

type BusinessInfo {
  legal_name              String
  weekly_fuel_spend       Int
  average_monthly_revenue Int
  business_type           String
  business_crn            String
  merchant_category_code  String
  business_url            String
  num_vehicles            Int
}

type DirectorInfo {
  dob             String
  firstname       String
  lastname        String
  email           String
  building_number Int?
  line1           String
  line2           String?
  city            String
  postcode        String
  region          String
  country         String? @default("GB")
}

type CardInfo {
  card_business_name String
  num_cards          Int?
  shipping_speed     ShippingSpeed
}

type SpendingLimit {
  amount   Int
  interval SpendingLimitInterval
}

type MerchantData {
  category      String
  category_code String
  name          String?
  network_id    String
  city          String?
  postcode      String?
  region        String?
  country       String?
}

type PurchaseDetails {
  fuel_type         String
  unit_type         String
  unit_cost_decimal Float
  volume            Int
}

type PaymentSchedule {
  interval               PaymentInterval
  interval_execution_day Int
  start_date             Int             @db.Long
}

type MerchantCodeInfo {
  name    String
  codes   String[]
  enabled Boolean
}

type InvoiceLineItem {
  id          String  @db.ObjectId
  name        String
  description String?
  unit        String?
  price       Int
  quantity    Int
}
model User {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt
  email              String        @unique
  full_name          String
  firstname          String
  lastname           String
  phone              String
  emailVerified      DateTime?     @map("email_verified")
  admin              Boolean       @default(false)
  approved           Boolean       @default(false)
  verify_token       String        @default("")
  reset_token        String        @default(uuid())
  referral_code      String        @unique @default(cuid())
  referral           Referral?     @relation("user_referral")
  referrals          Referral[]    @relation("referred_users")
  terms              Boolean?
  password           String
  location           Address
  shipping_address   Address
  card_configuration CardInfo
  business           BusinessInfo
  director           DirectorInfo
  stripe             StripeInfo
  drivers            Driver[]
  cards              Card[]
  transactions       Transaction[]
  invoices           Invoice[]
  payments           Payment[]
  statements         Statement[]
  bank_accounts      BankAccount[]
  accounts           Account[]
  sessions           Session[]
  Customer           Customer[]
  Item               Item[]
  TaxRate            TaxRate[]
}
